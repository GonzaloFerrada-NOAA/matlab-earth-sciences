function [x,y] = surf2img(xin,yin)
    
    % Data is assumed to come as regular grid, i.e., generated by meshgrid or ndgrid.
    % Output x and y comes as 2-D.
    
    if ~isvector(xin) & ~isvector(yin)
        xx1 = xin(1,:);
        xx2 = xin(:,1);
        yy1 = yin(1,:);
        yy2 = yin(:,1);
        
        dx1 = max(xx1) - min(xx1);
        dx2 = max(xx2) - min(xx2);
        dy1 = max(yy1) - min(yy1);
        dy2 = max(yy2) - min(yy2);
        
        if     dx1 > dx2
            xv = double(xx1);
        elseif dx2 > dx1
            xv = double(xx2);
        else
            error('xin data is not a regular grid.')
        end
        
        if     dy1 > dy2
            yv = double(yy1);
        elseif dy2 > dy1
            yv = double(yy2);
        else
            error('yin dat is not a regular grid.')
        end
    else
        xv = double(xin); % xin as vector
        yv = double(yin); % yin as vector
    end
        
    % Calculate spacement between each point in xin and yin:
    dx = abs(diff(xv));
    dy = abs(diff(yv));
    
    % Warning if data is not a regular grid:
    if min(dy) ~= max(dy)
        warning('yin is not regularly/equally spaced. May produce undesirable results.')
    end
    if min(dx) ~= max(dx)
        warning('xin is not regularly/equally spaced. May produce undesirable results.')
    end
    
    % Calculate halved spacement in each (x,y) direction:
    rx = mean(dx) / 2;
    ry = mean(dy) / 2;
    
    % New x and y:
    x1 = linspace(min(xv) - rx, max(xv) + rx, numel(xv));
    y1 = linspace(min(yv) - ry, max(yv) + ry, numel(yv));
    
    % Make output grid:
    [x,y] = ndgrid(x1,y1);
    
end













